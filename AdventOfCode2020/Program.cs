using static System.Console;

WriteLine("---* Advent of Code 2020 *---");
WriteLine("-~*-*-*^~*~ Day 1 ~*~^*-*-*~-");
WriteLine($"Multiplying the 2 entries equal to 2020 together gives us {AdventOfCode2020.Code.Day1.Part1.Solve()}");
WriteLine($"Multiplying the 3 entries equal to 2020 together gives us {AdventOfCode2020.Code.Day1.Part2.Solve()}");
WriteLine("-~*-*-*^~*~ Day 2 ~*~^*-*-*~-");
WriteLine($"There are {AdventOfCode2020.Code.Day2.Part1.Solve()} valid passwords");
WriteLine($"There are {AdventOfCode2020.Code.Day2.Part2.Solve()} valid passwords with the new interpretation");
WriteLine("-~*-*-*^~*~ Day 3 ~*~^*-*-*~-");
WriteLine($"There are {AdventOfCode2020.Code.Day3.Part1.Solve()} trees on a slope of right 3 down 1");
WriteLine($"Multiplying together all the trees from the listed slopes we get {AdventOfCode2020.Code.Day3.Part2.Solve()}");
WriteLine("-~*-*-*^~*~ Day 4 ~*~^*-*-*~-");
WriteLine($"There are {AdventOfCode2020.Code.Day4.Part1.Solve()} valid passports in the batch file");
WriteLine($"There are {AdventOfCode2020.Code.Day4.Part2.Solve()} valid passports in the batch file with valid values");
WriteLine("-~*-*-*^~*~ Day 5 ~*~^*-*-*~-");
WriteLine($"The highest seat ID on a boarding pass is {AdventOfCode2020.Code.Day5.Part1.Solve()}");
WriteLine($"The ID of the seat is {AdventOfCode2020.Code.Day5.Part2.Solve()}");
WriteLine("-~*-*-*^~*~ Day 6 ~*~^*-*-*~-");
WriteLine($"The sum of question where anyone answered 'yes' is {AdventOfCode2020.Code.Day6.Part1.Solve()}");
WriteLine($"The sum of question where everyone answered 'yes' is {AdventOfCode2020.Code.Day6.Part2.Solve()}");
WriteLine("-~*-*-*^~*~ Day 7 ~*~^*-*-*~-");
WriteLine($"{AdventOfCode2020.Code.Day7.Part1.Solve()} bag colors can eventually contain at least one 'shiny gold' bag");
WriteLine($"{AdventOfCode2020.Code.Day7.Part2.Solve()} individual bags are required inside the 'shiny gold' bag");
WriteLine("-~*-*-*^~*~ Day 8 ~*~^*-*-*~-");
WriteLine($"The value in the accumulator is {AdventOfCode2020.Code.Day8.Part1.Solve()}");
WriteLine($"The value of the accumulator after the program terminates is {AdventOfCode2020.Code.Day8.Part2.Solve()}");
WriteLine("-~*-*-*^~*~ Day 9 ~*~^*-*-*~-");
WriteLine($"The first number that is not the sum of two of the 25 previous numbers is {AdventOfCode2020.Code.Day9.Part1.Solve()}");
WriteLine($"The encryption weakness in the XMAS-encrypted list of numbers is {AdventOfCode2020.Code.Day9.Part2.Solve()}");
WriteLine("-~*-*-*^~*~ Day 10 ~*~^*-*-*~-");
WriteLine($"The number of 1-jolt differences multiplied by the number of 3-jolts differences is {AdventOfCode2020.Code.Day10.Part1.Solve()}");
WriteLine($"The total number of distinct ways to arrange the adapters is {AdventOfCode2020.Code.Day10.Part2.Solve()}");
WriteLine("-~*-*-*^~*~ Day 11 ~*~^*-*-*~-");
WriteLine($"{AdventOfCode2020.Code.Day11.Part1.Solve()} seats end up occupied");
WriteLine($"{AdventOfCode2020.Code.Day11.Part2.Solve()} seats end up occupied with the new rules");
WriteLine("-~*-*-*^~*~ Day 12 ~*~^*-*-*~-");
WriteLine($"The Manhattan distance between the computed location and the ship's starting position is {AdventOfCode2020.Code.Day12.Part1.Solve()}");
WriteLine($"The Manhattan distance between the new location and the ship's starting position is {AdventOfCode2020.Code.Day12.Part2.Solve()}");
WriteLine("-~*-*-*^~*~ Day 13 ~*~^*-*-*~-");
WriteLine($"The ID of the earliest bus to the airport multiplied by the number of minutes to wait is {AdventOfCode2020.Code.Day13.Part1.Solve()}");
WriteLine($"The earlist timestamp such that all of the bus depart at offsets matching their positions is {AdventOfCode2020.Code.Day13.Part2.Solve()}");